:PROPERTIES:
:header-args:conf-space: :tangle config :padline yes
:END:

* Virtual Desktop
Use just one Desktop, with a size of 3x3 pages:
#+begin_src conf-space
  DesktopSize 3x3
#+end_src

Enable changing the viewport by hitting the edges with the mouse:
#+begin_src conf-space
  EdgeScroll 100 100
  EdgeThickness 1
#+end_src

* RandR Support

** (De-)Activation of (dis-)connected monitors
After a monitor is connected, its status can be verifed by executing:
#+begin_src shell :results verbatim :wrap example
  xrandr | grep DP
#+end_src

It should result in something like:
#+begin_example
  eDP-1 connected primary 2048x1152+0+0 (normal left inverted right x axis y axis) 344mm x 194mm
  DP-1 connected (normal left inverted right x axis y axis)
  DP-2 disconnected (normal left inverted right x axis y axis)
  DP-3 disconnected (normal left inverted right x axis y axis)
  DP-4 disconnected (normal left inverted right x axis y axis)
#+end_example

After connecting a new monitor, it has to be activated with:
#+begin_src shell :results none
  xrandr --output DP-1 --auto
#+end_src

This leads to
1. Firing /FvwmEvent/ the event /monitor_enabled/
2. Execution of /RandRFunc/

Disconnecing a monitor leads to
1. Executing of /RandRFunc/
2. Firing /FvwmEvent/ the event /monitor_disabled/

After a monitor has been disconnected, it has to be deactivated, by executing:
#+begin_src shell :results none
  xrandr --output DP-1 --off
#+end_src

*Note*: Deactivating a monitor does not fire any /FvwmEvent/ events, as long as it is still connected. The function /RandRFunc/ and the event /monitor_disabled/ only comes into effect when the monitor has been disconnected. 

Two functions are added:
1. Activate a monitor as primary monitor. The monitor to activate is the first parameter of the function:
   #+begin_src conf-space
     DestroyFunc ActivateMonitor
     AddToFunc ActivateMonitor
      + I Exec xrandr --output $0 --auto --primary
   #+end_src

   The activated monitor is set as primary monitor, so desktop resolution and /FvwmPager/ can be adjusted, by restarting FVWM.

2. Deactivate a monitor and make the standard monitor (/eDP-1/) the primary monitor again. The monitor to deactivate is the first parameter of the function:
   #+begin_src conf-space
     DestroyFunc DeactivateMonitor
     AddToFunc DeactivateMonitor
      + I Exec xrandr --output $0 --off
      + I Exec xrandr --output eDP-1 --primary
   #+end_src

Both functions can be configured to (de-)activate /HDMI-1/ and /DP-1/, if a monitor is connected, but it seems not to be necessary, as long /eDP-1/ is not the primary monitor:
#+begin_example conf-space
  ,*FvwmEvent: Cmd
  ,*FvwmEvent: monitor_disabled "DeactivateMonitor HDMI-1"
  ,*FvwmEvent: monitor_disabled "DeactivateMonitor DP-1"
  ,*FvwmEvent: monitor_enabled "ActivateMonitor HDMI-1"
  ,*FvwmEvent: monitor_enabled "ActivateMonitor DP-1"
#+end_example

*Note*: After FVWM has been (re)started and a monitor is connected the first time, neither /RandRFunc/ is executed nor /FvwmEvent/ events are fired. Therefore /ActivateMonitor/ has to be executed manually once. After that, the automatic (de-)activation of /DP-1/ works.

* Initialization
A background image is set once during initialization. The parameter ~-r~ is used to support transparency simulation. Also start [[https://github.com/brndnmtthws/conky][Conky]] to display some system information:
#+begin_src conf-space
  DestroyFunc InitFunction
  AddToFunc   InitFunction
  + I Exec exec fvwm-root -r \
    ${FVWM_DATADIR}/default-config/images/background/bg3.png
  + I Exec conky
#+end_src

Start the modules /FvwmPager/ and /FvwmEvent/, on startups and restarts, after FVWM has read its config:
#+begin_src conf-space
  DestroyFunc StartFunction
  AddToFunc   StartFunction
  + I Module FvwmPager
  + I Module FvwmEvent
#+end_src

Conky must be forced to reload its configuration only on restarts, to avoid stopping it immediately after starting it during initialization:
#+begin_src conf-space
  DestroyFunc RestartFunction
  AddToFunc   RestartFunction
  + I Exec killall -SIGUSR1 conky
#+end_src

* Fonts
Set the default font:
#+begin_src conf-space
  DefaultFont "xft:Sans:antialias=True:size=10"
#+end_src

* Keyboard bindings

** Invoke the root menu
Invoke the [[* Root menu][root menu]] with /Super_L+F1/
#+begin_src conf-space
  Key F1 A 4  PopUp MenuFvwmRoot
#+end_src

** Enable brightness control
After installing ~brightnessctl~ and ~brightness-udev~, use the respecting keys function keys to increase or decrease the screen brightnesss:
#+begin_src conf-space
  Key XF86MonBrightnessDown A A Exec exec brightnessctl s 10%-
  Key XF86MonBrightnessUp   A A Exec exec brightnessctl s 10%+
#+end_src

** Enable audio controls
After installing /pulseaudio-utils/, use the respecting multimedia keys:
- (Un-)mute audio playback:
#+begin_src conf-space
  Key XF86AudioMute A A Exec exec pactl set-sink-mute \
      $(pactl get-default-sink) toggle
#+end_src

- Raise and lower playback volume:
#+begin_src conf-space
  Key XF86AudioLowerVolume A A Exec exec pactl set-sink-volume \
      $(pactl get-default-sink) -10%
  Key XF86AudioRaiseVolume A A Exec exec pactl set-sink-volume \
      $(pactl get-default-sink) +10%
#+end_src

- (Un-)mute the microphone:
#+begin_src conf-space
  Key XF86AudioMicMute A A Exec exec pactl set-source-mute \
      $(pactl get-default-source) toggle
#+end_src

** Page navigation
Page navigation is done with the Numpad arrow keys or /H/, /J/, /K/ and /L/ while pressing /Super_L/:
#+begin_src conf-space
  Key J	     A 4 GotoPage  0p  1p
  Key KP_Down  A 4 GotoPage  0p  1p
  Key H	     A 4 GotoPage -1p  0p
  Key KP_Left  A 4 GotoPage -1p  0p
  Key L	     A 4 GotoPage  1p  0p
  Key KP_Right A 4 GotoPage  1p  0p
  Key K        A 4 GotoPage  0p -1p
  Key KP_Up    A 4 GotoPage  0p -1p
#+end_src

** Window controls
Maximized windows should also be raised, to have them not maximized behind other windows of the same layer. Therefore the following function is defined:
#+begin_src conf-space
  DestroyFunc Maximize-and-Raise
  AddToFunc Maximize-and-Raise
  + I Maximize
  + I Raise
#+end_src

All window controlling is done, using the modifcator for /Super_L/:
- Open the [[* Menu for window operations][menu for window operations]] on the current window with /Super_L+O/:
#+begin_src conf-space
  Key O A 4 Menu MenuWindowOps
#+end_src

- Open the [[* Menu for sending windows to pages][menu for sending windows to pages]] on the current window with /Super_L+P/:
#+begin_src conf-space
  Key P A 4 Menu MenuWindowOps
#+end_src

- Move the current window with /Super_L+M/:
#+begin_src conf-space
  Key M A 4 Move
#+end_src

- Move the current window in an animated way in a give direction with /Super_L+Shift+<Arrow-Key>/ until it hits another window or a screen boundary:
#+begin_src conf-space
  Key Up A 4S AnimatedMove shuffle Up
  Key Down A 4S AnimatedMove shuffle Down
  Key Left A 4S AnimatedMove shuffle Left
  Key Right A 4S AnimatedMove shuffle Right
#+end_src

- Resize the current window with /Super_L+G/:
#+begin_src conf-space
  Key G A 4 Resize
#+end_src

- Iconifies or deiconifies the current window with /Super_L+Down/:
#+begin_src conf-space
  Key Down A 4 Iconify
#+end_src

- Iconifies all iconifiable windows on the current page with /Super_L+D/:
#+begin_src conf-space
  Key D A 4 All (Iconifiable, CurrentPage) Iconify True
#+end_src

- Maximizes or unmaximizes the current window with /Super_L+Up/:
#+begin_src conf-space
  Key Up A 4 Maximize-and-Raise
#+end_src

- Raise the current window in its layer with /Super_L+R/:
#+begin_src conf-space
  Key R A 4 Raise
#+end_src

- Stick or unstick the current window with /Super_L+G/:
#+begin_src conf-space
  Key S A 4 Stick
#+end_src



** Deactivate M-Tab for mc
Some programms, like Midnight Commander use the combination /M-Tab/. Passing synthetic events to ~xterm~ like it is described on the [[https://www.fvwm.org/Man/fvwm3commands/#_mouse_key_bindings][FVWM3 man page]] leads to further problems and is therefore not the ideal way.

So the combination /M-Tab/ is deactivated and remapped to /Super_L-Tab/:
#+begin_src conf-space
  Key Tab A M -
  Key Tab A 4 WindowList Root c c NoGeometry, SelectOnRelease Super_L
#+end_src

** Shortcuts to open some favorite apps
Add some key bindigs to open some apps:

- Open terminal with /Super_L+Ctrl+T/
  #+begin_src conf-space
    Key T A 4C Exec exec x-terminal-emulator
  #+end_src

- Open Kodi with /Super_L+Ctrl+K/:
  #+begin_src conf-space
    Key K A 4C Exec exec kodi
  #+end_src

- Open Emacs with /Super_L+Ctrl+E/:
  #+begin_src conf-space
    Key E A 4C Exec exec emacs
  #+end_src

- Open favorite web browser (Mozilla Firefox) with /Super_L+Ctrl+B/:
  #+begin_src conf-space
    Key B A 4C Exec exec x-www-browser
  #+end_src

- Open favorite mail client (Mozilla Thunderbird) with /Super_L+Ctrl+M/:
  #+begin_src conf-space
    Key M A 4C Exec exec thunderbird
  #+end_src

- Open JDownloader with /Super_L+Ctrl+J/:
  #+begin_src conf-space
    Key J A 4C Exec exec jd.sh
  #+end_src

* Mouse bindings
Add buttons to window title for (un-)maximize and (de-)iconify windows:
#+begin_src conf-space
  Mouse 1 1 A Menu MenuWindowOps Delete
  Mouse 1 2 A Maximize-and-Raise
  Mouse 1 4 A Iconify
#+end_src

Deiconify iconified windows with a mouse click:
#+begin_src conf-space
  Mouse 1 I A Iconify False
#+end_src

* Menus

** Menu for window operations
Adding a menu with several window operations on the current window:
1. Identifiy the window
2. Move the window
3. Send the window to a different page
4. Resize the window
5. Iconfy or deiconify the window
6. Maximize or unmaximize and raise the window in the current layer
7. Raise the window in the current layer
8. Lower the window in the current layer
9. Move the window into the "top" layer
10. Move the window into the "default" layer
11. Move the window into the "bottom" layer
12. Switch a window between sticky and unsticky
13. Shade or unshade the window
14. Redraw the window
15. Close the window gracefully
16. Delete the window
#+begin_src conf-space
  DestroyMenu MenuWindowOps
  AddToMenu   MenuWindowOps
   + "$[gt.&Identify]%icons/info.png%"		  Module FvwmIdent
   + ""						  Nop
   + "$[gt.&Move]%icons/win/move.png%"		  Move
   + "$[gt.Send To &Page]%icons/win/sendto.png%"	  Popup MenuSendToPage
   + ""						  Nop
   + "$[gt.Re&size]%icons/win/resize.png%"	  Resize
   + "$[gt.(De)Iconify]%icons/win/iconify.png%"	  Iconify
   + "$[gt.(Un)Maximize]%icons/win/max.png%"	  Maximize-and-Raise
   + ""						  Nop
   + "$[gt.&Raise]%icons/win/raise.png%"		  Raise
   + "$[gt.&Lower]%icons/win/lower.png%"		  Lower
   + ""						  Nop
   + "$[gt.Stays On &Top]%icons/win/top.png%"	  Pick (CirculateHit) Layer 0 6
   + "$[gt.Stays &Put]%icons/win/stays.png%"	  Pick (CirculateHit) Layer 0 4
   + "$[gt.Stays On &Bottom]%icons/win/bottom.png%" Pick (CirculateHit) Layer 0 2
   + ""						  Nop
   + "$[gt.(Un)&Sticky]%icons/win/sticky.png%"	  Stick
   + "$[gt.(Un)S&hade]%icons/win/shade.png%"	  WindowShade
   + "$[gt.Re&fresh Window]%icons/refresh.png%"	  RefreshWindow
   + ""						  Nop
   + "$[gt.&Close]%icons/win/close.png%"		  Close
   + "$[gt.&Delete]%icons/win/done.png%"		  Delete
   + "$[gt.&Destroy]%icons/win/destroy.png%"	  Destroy
#+end_src

*** Menu for sending windows to pages
The window operation menu above uses a submenu for sending windows to a specific page:
#+begin_src conf-space
  DestroyMenu MenuSendToPage
  AddToMenu   MenuSendToPage
   + "$[gt.Page] &1 (0,0)" MoveToPage 0 0
   + "$[gt.Page] &2 (1,0)" MoveToPage 1 0
   + "$[gt.Page] &3 (2,0)" MoveToPage 2 0
   + "$[gt.Page] &4 (0,1)" MoveToPage 0 1
   + "$[gt.Page] &5 (1,1)" MoveToPage 1 1
   + "$[gt.Page] &6 (2,1)" MoveToPage 2 1
   + "$[gt.Page] &7 (0,2)" MoveToPage 0 2
   + "$[gt.Page] &8 (1,2)" MoveToPage 1 2
   + "$[gt.Page] &9 (2,2)" MoveToPage 2 2
#+end_src

** Root menu
The definition of the root menu with the following items:
1. An entry for the [[* /freedesktop.org/ menu][/freedesktop.org/ menu]]
2. Open the default terminal
3. Open the /FvwmConsole/
4. Open the dialog to copy and apply the default configuration
5. Activating a secondary Monitor, by opening a submenu with available monitors.
6. Deactivating a secondary Monitor, by opening a submenur with available monitors.
7. Redraw all windows on the screen
8. Restart /FVWM/
9. Quit /FVWM/
10. Hibernate the computer
#+begin_src conf-space
  DestroyMenu MenuFvwmRoot
  AddToMenu   MenuFvwmRoot "Fvwm" Title
  + "$[gt.XDG &Menu]%icons/apps.png%"	Popup XDGMenu
  + "&Terminal%icons/terminal.png%"	Exec exec x-terminal-emulator
  + ""					Nop
  + "Fvwm&Console%icons/terminal.png%"	Module FvwmConsole -terminal \
    x-terminal-emulator
  + "$[gt.Cop&y Config]%icons/conf.png%"	FvwmScript \
    FvwmScript-ConfirmCopyConfig
  + ""					Nop
  + "&Activate Monitor" 			Popup MenuActivateMonitor
  + "&DeActivate Monitor"			Popup MenuDeActivateMonitor
  + ""					Nop
  + "$[gt.Re&fresh]%icons/refresh.png%"	Refresh
  + "$[gt.&Restart]%icons/restart.png%"	Restart
  + "$[gt.&Quit]%icons/quit.png%"		Module FvwmScript \
    FvwmScript-ConfirmQuit
  + "$[gt.&Hibernate]"			Exec exec systemctl hibernate
#+end_src

** Menu for activating monitors
The menu has an entry for each available monitor to activate it and make it the primary monitor:
#+begin_src conf-space
  DestroyMenu MenuActivateMonitor
  AddToMenu   MenuActivateMonitor
  + "Activate &DP-1" ActivateMonitor DP-1
  + "Activate &HDMI-1" ActivateMonitor HDMI-1
#+end_src

** Menu for deactivating monitors
The has an entry for each available monitor to deactivate it:
#+begin_src conf-space
  DestroyMenu MenuDeactivateMonitor
  AddToMenu   MenuDeactivateMonitor
  + "DeActivate &DP-1" DeactivateMonitor DP-1
  + "DeActivate &HDMI-1" DeactivateMonitor HDMI-1
#+end_src

** /freedesktop.org/ menu
The /freedesktop.org/ menu, which is used in the root menu is generated with the following command:
#+begin_src conf-space
  PipeRead "fvwm3-menu-desktop -e --enable-mini-icons"
#+end_src

* Style

** Focus policy
Windows should keep the focus until the mouse pointer hits another window and not the root window:
#+begin_src conf-space
  Style * SloppyFocus
#+end_src

*** JDownloader
/JDownloader/ sets the WM hint property ~input=false~, but does not take the focus, if it is selected via /WindowList/ from another page. To fix this, /JDownloader/ windows are given the lenient focus style:
#+begin_src conf-space
  Style JDownloader* FPLenient
#+end_src

** Window title

*** No title for Steam applications
Windows starting with class /steam/ (Steam itself and its apps, like games) should not have a title bar because they either have their own controls or it irritates while playing:
#+begin_src conf-space
  Style steam* !Title
#+end_src

*** No title for Epic Games Launcher
#+begin_src conf-space
  Style epicgameslauncher.exe !Title
#+end_src

Deactivate titles for installed games:

- Brotato
#+begin_src conf-space
  Style brotato.exe !Title
#+end_src

** Title buttons
Use style /MwmButtons/ to have maximized windows display a different button as button 2:
#+begin_src conf-space
  Style * MwmButtons
#+end_src

** Borders
Set the border width to 2 pixels:
#+begin_src conf-space
  Style * HandleWidth 2
#+end_src

** Icons
Setting an absolute icon size of /64x6x/ pixels:
#+begin_src conf-space
  Style * IconSize 64 64
#+end_src

Create an icon box from top left to bottom right of the screen. The grid has a size of 80x100 to hold icons of the size /64x64/ pixels and the current icon size of an active icon of /xterm/:
#+begin_src conf-space
  Style * IconBox 0 0 -0 -0,\
          IconGrid 90 100,\
  	IconFill top left
#+end_src

Make icon titles flat:
#+begin_src conf-space
  Style * IconTitleRelief 0
#+end_src

Have no backgrund relief around icons:
#+begin_src conf-space
  Style * IconBackgroundRelief 0
#+end_src

Setting the icons and styles for specific applications:
#+begin_src conf-space
  Style Emacs IconOverride, Icon /usr/share/icons/hicolor/scalable/apps/emacs.svg
#+end_src

** Movement
Always move windows with visible content:
#+begin_src conf-space
  OpaqueMoveSize unlimited
#+end_src

** Resizing
Resize windows with visible content:
#+begin_src conf-space
  Style * ResizeOpaque
#+end_src

** Colorsets
The colorset definitions are based on [[https://fvwm-themes.sourceforge.net/doc/colorsets][fvwm-themes]].

Inactive window titles have a grey (~#bebebe~) foreground and a very dark grey (~#404040~) background color.
Active window titles have a white (~#ffffff~) foreground and a steel blue (~#4682b4~) background color. Both use transparency and are tinted with 50% of the respective background color:
#+begin_src conf-space
  Colorset 1 fg Grey, bg Grey25, RootTransparent, Tint Grey25 50, NoShape
  Colorset 2 fg White, bg SteelBlue, RootTransparent, Tint SteelBlue 50, NoShape
#+end_src

Borders use the same foreground and background colors as the titles. Instead of transparency they use a diagonal color gradient from their background colors to black (~#000000~):
#+begin_src conf-space
  Colorset 3 fg Grey, bg Grey25, DGradient 64 Grey25 Black, NoShape
  Colorset 4 fg White, bg SteelBlue, DGradient 64 SteelBlue Black, NoShape
#+end_src

In general menus use the same background and foreground colors like active window titles. The backgorund color is tinted with 50% black to have a better contrast. Hilighted (selected) menuitems use the same colors but without the tinted background color. Greyed menu items and the titles have the same colors as the menu, but with a 50% black tinted forground color:
#+begin_src conf-space
  Colorset 5 fg White, bg SteelBlue, bgTint Black 50, Plain, NoShape
  Colorset 6 fg White, bg SteelBlue, Plain, NoShape
  Colorset 7 fg White, bg SteelBlue, fgTint Black 50, Plain, NoShape
#+end_src

** Window Styles
In general, colorset 1 is used as default for inactive items. Colorset 2 is used for hilighted active items. This is necessary for title or icon texts:
#+begin_src conf-space
  Style * Colorset 1, HilightColorset 2
#+end_src

*** Title styles
The title of inactive windows use colorset 1, while titles of active windows use colorset 2. All titles are flat and have no reliefs:
#+begin_src conf-space
  TitleStyle Inactive Colorset 1
  TitleStyle Active Colorset 2
  TitleStyle -- Flat
#+end_src

*** Border styles
Borders of inactive windows use colorset 3, while active borders use colorset 4. Like titles, are all borders flat and have no reliefs:
#+begin_src conf-space
  BorderStyle Inactive Colorset 3
  BorderStyle Active Colorset 4
  BorderStyle -- Flat
#+end_src

*** Button styles
Buttons use the same colorsets as titles. They are flat and have no reliefs as well:
#+begin_src conf-space
  ButtonStyle All AllInactive Colorset 1
  ButtonStyle All AllActive Colorset 2
  ButtonStyle All -- Flat
#+end_src

Button 1 shows the mini icon of the current application, if defined:
#+begin_src conf-space
  AddButtonStyle 1 MiniIcon
#+end_src

Button 2 changes, whether the window is maximized or not:
#+begin_src conf-space
  AddButtonStyle 2 AllNormal Vector 8 30x50@3 30x70@3 50x70@3 30x50@3 70x50@4 \
		 50x30@3 70x30@3 70x50@3
  AddButtonStyle 2 AllToggled Vector 8 40x60@3 40x80@3 20x60@3 40x60@3 60x40@4 \
		 80x40@3 60x20@3 60x40@3
#+end_src

A little more complex design for button 4 would be:
#+begin_src conf-space :tangle no
  AddButtonStyle 2 AllToggled Vector 8 60x70@1 80x70@1 80x20@1 20x20@0 20x70@0 \
		 60x70@1 60x40@3 20x40@3
  AddButtonStyle 2 AllNormal Vector 9 60x70@3 80x70@3 80x20@3 20x20@3 20x40@3 \
		 20x70@1 60x70@1 60x40@0 20x40@0
#+end_src

Button 4 shows a triangle upside down:
#+begin_src conf-space
  AddButtonStyle 4 Vector 4 30x30@3 70x30@3 50x70@3 30x30@3
#+end_src

An alternate design would be a little square in the bottom left corner:
#+begin_src conf-space :tangle no
  AddButtonStyle 4 Vector 5 30x70@3 50x70@3 50x50@3 30x50@3 30x70@3
#+end_src

** Menu Styles
Menus have the following style:
1. Menus use colorset 5 as their base colorset.
2. Colorset 6 is used for active menu items.
3. Titles are treated like greyed menu items and use colorset 7.
4. In general, menus have a pseudo transparent background of 85%.
5. Menus have no 3D borders and no 3D hilighting.
6. The background of the selected menu item is hilighted using the /ActiveColorset/. Hilighted items use the same forground color as active not hilighted items. The title is not hilighted.
7. Submenus are shifted in an animated way.
8. The triangles for submenus are solid and use the background color.
9. Long separators are used, spannging the whole menu area.
#+begin_src conf-space
  MenuStyle * MenuColorset 5
  MenuStyle * ActiveColorset 6
  MenuStyle * TitleColorset 7
  MenuStyle * Translucent 85
  MenuStyle * BorderWidth 0, Hilight3DOff
  MenuStyle * HilightBack
  MenuStyle * Animation
  MenuStyle * TrianglesSolid
  MenuStyle * SeparatorsLong
#+end_src

*** Menu items
Since menus have no side picture, no definition for this column is necessary. The hilighted area of a menu item spans around the whole item. After a 5 pixel space either the mini icon, if defined, or the label is shown. Between the label and the minicon is a 5 pixel space. If the item leads to a submenu the triangle is shown with a space of 5 pixels to the label. The item ends with a 5 pixel space either after the label or the submenu triangle:
#+begin_src conf-space
  MenuStyle * ItemFormat "%.5|%5.i%5.5l%.5>%5.|"
#+end_src

* FvwmPager

** Style
The pager is styled as follows:
1. Not having titles, borders or handles
2. Stickiness accross all pages and desks
3. Not appearing in the *WindowList*
4. Not being iconifiable, to prevent being iconified e.g by pressing /Super_L+D/
5. Make the position fixed, to prevent relocation
#+begin_src conf-space
  Style FvwmPager !Title, !Borders, !Handles
  Style FvwmPager Sticky
  Style FvwmPager WindowListSkip
  Style FvwmPager !Iconifiable
  Style FvwmPager FixedPosition
#+end_src

** Configuration
The pager is configured as follows
1. Place the pager into the top right corner
2. Do not show desktop labels
3. Show mini icons of windows
4. Ballons are shown for un-iconified pager
5. Ballons have no border
6. Do not show windows using the style /WindowListSkip/
#+begin_src conf-space
  DestroyModuleConfig FvwmPager:*
  ,*FvwmPager: Geometry -0+0
  ,*FvwmPager: Font None
  ,*FvwmPager: MiniIcons
  ,*FvwmPager: Balloons Pager
  ,*FvwmPager: BalloonBorderWidth 0
  ,*FvwmPager: UseSkipList
#+end_src

** Colors
/FvwmPager/ uses the following colors:
1. The default colorset is colorset 1, which uses the transparent grey background of the pager, like inactive window titles.
2. The active desktop is hilighted with colorset 2 like active window titles.
3. Windows whithin the pager use the same colorsets as the borders for acitve and inactive windows.
4. Balloon texts use the same colorset like active menuitems.
#+begin_src conf-space
  ,*FvwmPager: Colorset * 1
  ,*FvwmPager: HilightColorset * 2
  ,*FvwmPager: WindowColorsets 3 4
  ,*FvwmPager: BalloonColorset * 5
#+end_src
