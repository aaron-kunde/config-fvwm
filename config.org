:PROPERTIES:
:header-args:conf-space: :tangle config :padline yes
:END:

* Virtual Desktop
Use just one Desktop, with a size of 3x3 pages:
#+begin_src conf-space
  DesktopSize 3x3
#+end_src

Enable changing the viewport by hitting the edges with the mouse:
#+begin_src conf-space
  EdgeScroll 100 100
  EdgeThickness 1
#+end_src

* RandR Support

** (De-)Activation of (Dis-)connected monitors
After a monitor is connected, its status can be verifed by executing:
#+begin_src shell :results verbatim :wrap example
  xrandr | grep DP
#+end_src

It should result in something like:
#+begin_example
  eDP-1 connected primary 2048x1152+0+0 (normal left inverted right x axis y axis) 344mm x 194mm
  DP-1 connected (normal left inverted right x axis y axis)
  DP-2 disconnected (normal left inverted right x axis y axis)
  DP-3 disconnected (normal left inverted right x axis y axis)
  DP-4 disconnected (normal left inverted right x axis y axis)
#+end_example

After connecting a new monitor, it has to be activated with:
#+begin_src shell :results none
  xrandr --output DP-1 --auto
#+end_src

This leads to
1. Firing /FvwmEvent/ the event /monitor_enabled/
2. Execution of /RandRFunc/

Disconnecing a monitor leads to
1. Executing of /RandRFunc/
2. Firing FvwmEvent the event /monitor_disabled/

After a monitor has been disconnected, it has to be deactivated, by executing:
#+begin_src shell :results none
  xrandr --output DP-1 --off
#+end_src

*Note*: Deactivating a monitor does not fire any /FvwmEvent/ events, as long as it is still connected. The function /RandRFunc/ and the event /monitor_disabled/ only comes into effect when the monitor has been disconnected. 

Two functions are added:
1. Activate a monitor as primary monitor:
   #+begin_src conf-space
     DestroyFunc ActivateMonitor
     AddToFunc ActivateMonitor
      + I Exec xrandr --output $0 --auto --primary
   #+end_src

   The activated monitor is set as primary monitor, so desktop resolution and /FvwmPager/ can be adjusted, by restarting FVWM.

2. Deactivate a monitor and make the standard monitor the primary monitor again:
   #+begin_src conf-space
     DestroyFunc DeactivateMonitor
     AddToFunc DeactivateMonitor
      + I Exec xrandr --output $0 --off
      + I Exec xrandr --output eDP-1 --primary
   #+end_src

Both functions are configured to (de-)activate /DP-1/, if a monitor is connected:
#+begin_src conf-space
  ,*FvwmEvent: Cmd
  ,*FvwmEvent: monitor_disabled "DeactivateMonitor DP-1"
  ,*FvwmEvent: monitor_enabled "ActivateMonitor DP-1"
#+end_src

*Note*: After FVWM has been (re)started and a monitor is connected the first time, neither /RandRFunc/ is executed nor /FvwmEvent/ events are fired. Therefore /ActivateMonitor/ has to be executed manually once. After that, the automatic (de-)activation of /DP-1/ works.

* Initialization
Set a background image on initialization:
#+begin_src conf-space
  DestroyFunc InitFunction
  AddToFunc   InitFunction
  + I Exec exec fvwm3-root \
    ${FVWM_DATADIR}/default-config/images/background/bg3.png
#+end_src

Start the modules /FvwmPager/ and /FvwmEvent/, on startups and restarts, after FVWM has read its config:
#+begin_src conf-space
  DestroyFunc StartFunction
  AddToFunc   StartFunction
  + I Module FvwmPager
  + I Module FvwmEvent
#+end_src

* Fonts
Set the default font:
#+begin_src conf-space
  DefaultFont "xft:Sans:antialias=True:size=10"
#+end_src

* Keyboard bindings

** Enable brightness control
After installing ~brightnessctl~ and ~brightness-udev~, add these keybindings:
#+begin_src conf-space
  Key XF86MonBrightnessDown A A Exec exec brightnessctl s 10%-
  Key XF86MonBrightnessUp   A A Exec exec brightnessctl s 10%+
#+end_src

** Enable audio controls
Add control to mute raise and lower audio playback:
#+begin_src conf-space
  Key XF86AudioMute A A Exec exec pactl set-sink-mute \
      $(pactl get-default-sink) toggle
  Key XF86AudioLowerVolume A A Exec exec pactl set-sink-volume \
      $(pactl get-default-sink) -10%
  Key XF86AudioRaiseVolume A A Exec exec pactl set-sink-volume \
      $(pactl get-default-sink) +10%
#+end_src

** Page navigation

Page navigation shall be done with the Numpad arrow keys:
#+begin_src conf-space
  Key KP_Down  A 4 GotoPage  0p  1p
  Key KP_Left  A 4 GotoPage -1p  0p
  Key KP_Right A 4 GotoPage  1p  0p
  Key KP_Up    A 4 GotoPage  0p -1p
#+end_src

** Window control
Hitting /Super_L+Up/ maximizes or unmaximizes the current window:
#+begin_src conf-space
  Key Up A 4 Maximize
#+end_src

Hitting /Super_L+Down/ iconifies the current window:
#+begin_src conf-space
  Key Down A 4 Iconify
#+end_src


** Deactivate M-Tab for mc
Some programms, like Midnight Commander use the combination /M-Tab/. Passing synthetic events to ~xterm~ like it is described on the [[https://www.fvwm.org/Man/fvwm3commands/#_mouse_key_bindings][FVWM3 man page]] leads to further problems and is therefore not the ideal way.

Alternatively the combination /M-Tab/ is deactivated and remapped to /Super_L-Tab/. Furthermore the: 
#+begin_src conf-space
  Key Tab A M -
  Key Tab A 4 WindowList Root c c NoGeometry, SelectOnRelease Super_L
#+end_src

* Mouse bindings
Add buttons to window title for (un-)maximize and (de-)iconify windows:
#+begin_src conf-space
  Mouse 1 2 A Maximize
  Mouse 1 4 A Iconify
#+end_src

Deiconify iconified windows with a mouse click:
#+begin_src conf-space
  Mouse 1 I A Iconify False
#+end_src

* Focus policy
Windows should keep the focus until the mouse pointer hits another window and not the root window:
#+begin_src conf-space
  Style * SloppyFocus
#+end_src

* Menus

** Root menu
Definition of the root menu:
#+begin_src conf-space
  DestroyMenu MenuFvwmRoot
  AddToMenu   MenuFvwmRoot "Fvwm" Title
  + "$[gt.XDG &Menu]%icons/apps.png%"    Popup XDGMenu
  + "&Terminal%icons/terminal.png%"      Exec exec x-terminal-emulator
  + "" Nop
  + "Fvwm&Console%icons/terminal.png%"   Module FvwmConsole -terminal \
    x-terminal-emulator
  + "$[gt.Cop&y Config]%icons/conf.png%" FvwmScript FvwmScript-ConfirmCopyConfig
  + "" Nop
  + "&Activate DP-1%icons/run_arrow.png%" ActivateMonitor DP-1
  + "&DeActivate DP-1" DeActivateMonitor DP-1
  + "" Nop
  + "$[gt.&Restart]%icons/restart.png%"  Restart
  + "$[gt.&Quit]%icons/quit.png%"        Module FvwmScript FvwmScript-ConfirmQuit
#+end_src

** XDGMenu
Generate XDGMenu with mini icons:
#+begin_src conf-space
  PipeRead "fvwm3-menu-desktop -e --enable-mini-icons"
#+end_src

* FvwmPager
1. Putting it on the top right corner
2. Do not show Desktop labels
3. Show mini icons of windows
4. Balloins are shown for un-iconified pager
5. Do not show windows using the style /WindowListSkip/

#+begin_src conf-space
  Style FvwmPager !Title, !Borders, !Handles, Sticky, WindowListSkip, NeverFocus

  DestroyModuleConfig FvwmPager:*
  ,*FvwmPager: Geometry -0+0
  ,*FvwmPager: Font None
  ,*FvwmPager: MiniIcons
  ,*FvwmPager: Balloons Pager
  ,*FvwmPager: UseSkipList
#+end_src

